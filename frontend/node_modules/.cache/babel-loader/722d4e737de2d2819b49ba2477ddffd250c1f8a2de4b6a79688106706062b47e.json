{"ast":null,"code":"import { io } from 'socket.io-client';\nimport toast from 'react-hot-toast';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.connected = false;\n    this.user = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.eventListeners = new Map();\n\n    // URLs del servidor\n    this.serverUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n  }\n\n  // üîå Conectar al servidor Socket.io\n  connect(token, user) {\n    var _this$socket;\n    if ((_this$socket = this.socket) !== null && _this$socket !== void 0 && _this$socket.connected) {\n      console.log('üîå Ya conectado a Socket.io');\n      return this.socket;\n    }\n    this.user = user;\n    console.log(`üîÑ Conectando a Socket.io como ${user.nombre} (${user.rol})...`);\n    this.socket = io(this.serverUrl, {\n      auth: {\n        token\n      },\n      transports: ['websocket', 'polling'],\n      timeout: 5000,\n      reconnection: true,\n      reconnectionAttempts: this.maxReconnectAttempts,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000\n    });\n    this.setupEventHandlers();\n    return this.socket;\n  }\n\n  // üì° Configurar manejadores de eventos del socket\n  setupEventHandlers() {\n    // Evento de conexi√≥n exitosa\n    this.socket.on('connect', () => {\n      this.connected = true;\n      this.reconnectAttempts = 0;\n      console.log(`‚úÖ Conectado a Socket.io - ID: ${this.socket.id}`);\n\n      // Unirse a la sala del rol\n      this.joinRole(this.user.rol);\n\n      // Notificaci√≥n de conexi√≥n (solo en desarrollo)\n      if (process.env.NODE_ENV === 'development') {\n        toast.success(`üîå Conectado en tiempo real`, {\n          duration: 2000\n        });\n      }\n    });\n\n    // Evento de desconexi√≥n\n    this.socket.on('disconnect', reason => {\n      this.connected = false;\n      console.log(`‚ùå Desconectado de Socket.io: ${reason}`);\n      if (reason === 'io server disconnect') {\n        // Desconexi√≥n del servidor, reconectar manualmente\n        this.socket.connect();\n      }\n    });\n\n    // Eventos de reconexi√≥n\n    this.socket.on('reconnect_attempt', attemptNumber => {\n      this.reconnectAttempts = attemptNumber;\n      console.log(`üîÑ Intento de reconexi√≥n ${attemptNumber}/${this.maxReconnectAttempts}`);\n    });\n    this.socket.on('reconnect', attemptNumber => {\n      this.connected = true;\n      console.log(`‚úÖ Reconectado despu√©s de ${attemptNumber} intentos`);\n      toast.success('üîå Reconectado al sistema', {\n        duration: 3000\n      });\n    });\n    this.socket.on('reconnect_failed', () => {\n      console.error('‚ùå Fall√≥ la reconexi√≥n');\n      toast.error('‚ùå Error de conexi√≥n. Recarga la p√°gina.', {\n        duration: 10000\n      });\n    });\n\n    // Eventos de error\n    this.socket.on('connect_error', error => {\n      console.error('‚ùå Error de conexi√≥n Socket.io:', error.message);\n      if (error.message === 'Autenticaci√≥n fallida') {\n        toast.error('‚ùå Error de autenticaci√≥n en tiempo real');\n        this.disconnect();\n      }\n    });\n\n    // Configurar eventos espec√≠ficos por rol\n    this.setupRoleSpecificEvents();\n\n    // Configurar eventos generales\n    this.setupGeneralEvents();\n  }\n\n  // üé≠ Configurar eventos espec√≠ficos seg√∫n el rol del usuario\n  setupRoleSpecificEvents() {\n    if (!this.user) return;\n    switch (this.user.rol) {\n      case 'mozo':\n        this.setupMozoEvents();\n        break;\n      case 'cocina':\n        this.setupCocinaEvents();\n        break;\n      case 'cajero':\n        this.setupCajeroEvents();\n        break;\n      case 'administrador':\n        this.setupAdminEvents();\n        break;\n      default:\n        console.log(`Rol ${this.user.rol} no tiene eventos espec√≠ficos configurados`);\n        break;\n    }\n  }\n\n  // üçΩÔ∏è Eventos para mozos\n  setupMozoEvents() {\n    // Pedido listo para entregar\n    this.socket.on('pedido-listo', data => {\n      console.log('üîî Pedido listo para entregar:', data);\n\n      // Notificaci√≥n sonora + visual\n      this.playNotificationSound();\n      toast.success(`üçΩÔ∏è Mesa ${data.mesa} - Pedido #${data.pedidoId} listo para entregar`, {\n        duration: 8000,\n        icon: 'üîî'\n      });\n\n      // Callback personalizado si existe\n      this.triggerCallback('pedido-listo', data);\n    });\n\n    // Pedido disponible para cualquier mozo\n    this.socket.on('pedido-disponible-para-entregar', data => {\n      console.log('üìã Pedido disponible para entregar:', data);\n      toast(`üìã Mesa ${data.mesa} tiene un pedido listo`, {\n        duration: 5000,\n        icon: 'üìã'\n      });\n    });\n\n    // Cambio en disponibilidad de productos\n    this.socket.on('producto-disponibilidad-actualizada', data => {\n      console.log('ü•ò Producto actualizado:', data);\n      const mensaje = data.disponible ? `‚úÖ ${data.productoNombre} ya est√° disponible` : `‚ùå ${data.productoNombre} se agot√≥`;\n      toast(mensaje, {\n        duration: 4000,\n        icon: data.disponible ? '‚úÖ' : '‚ùå'\n      });\n      this.triggerCallback('producto-disponibilidad-actualizada', data);\n    });\n  }\n\n  // üë®‚Äçüç≥ Eventos para cocina\n  setupCocinaEvents() {\n    // Nuevo pedido recibido\n    this.socket.on('nuevo-pedido', data => {\n      console.log('üîî Nuevo pedido recibido:', data);\n\n      // Sonido de notificaci√≥n\n      if (data.sonido) {\n        this.playNotificationSound();\n      }\n\n      // Notificaci√≥n visual prominente\n      toast.success(`üî• NUEVO PEDIDO - Mesa ${data.pedido.mesa.numero}`, {\n        duration: 10000,\n        icon: 'üîî',\n        style: {\n          background: '#ff6b6b',\n          color: 'white',\n          fontSize: '16px',\n          fontWeight: 'bold'\n        }\n      });\n\n      // Callback para actualizar UI\n      this.triggerCallback('nuevo-pedido', data);\n    });\n  }\n\n  // üí∞ Eventos para cajeros\n  setupCajeroEvents() {\n    // Pedido listo para cobrar\n    this.socket.on('pedido-listo-para-cobrar', data => {\n      console.log('üí≥ Pedido listo para cobrar:', data);\n      toast.success(`üí≥ Mesa ${data.mesa} lista para cobrar - $${data.total}`, {\n        duration: 6000,\n        icon: 'üí∞'\n      });\n      this.triggerCallback('pedido-listo-para-cobrar', data);\n    });\n\n    // Cuenta solicitada\n    this.socket.on('cuenta-solicitada', data => {\n      console.log('üßæ Cuenta solicitada:', data);\n      toast.success(`üßæ Mesa ${data.mesa} solicita la cuenta - $${data.total}`, {\n        duration: 8000,\n        icon: 'üßæ'\n      });\n      this.triggerCallback('cuenta-solicitada', data);\n    });\n  }\n\n  // üëë Eventos para administradores\n  setupAdminEvents() {\n    // Estad√≠sticas de conexi√≥n\n    this.socket.on('connection-stats', data => {\n      console.log('üìä Stats de conexi√≥n:', data);\n      this.triggerCallback('connection-stats', data);\n    });\n\n    // Venta realizada\n    this.socket.on('venta-realizada', data => {\n      console.log('üí∞ Venta realizada:', data);\n      this.triggerCallback('venta-realizada', data);\n    });\n\n    // Inventario actualizado\n    this.socket.on('inventario-actualizado', data => {\n      console.log('üì¶ Inventario actualizado:', data);\n      this.triggerCallback('inventario-actualizado', data);\n    });\n  }\n\n  // üåê Eventos generales para todos los roles\n  setupGeneralEvents() {\n    // Mesa liberada\n    this.socket.on('mesa-liberada', data => {\n      console.log('üè† Mesa liberada:', data);\n      this.triggerCallback('mesa-liberada', data);\n    });\n\n    // Estado de mesa actualizado\n    this.socket.on('mesa-estado-actualizada', data => {\n      console.log('üè† Mesa actualizada:', data);\n      this.triggerCallback('mesa-estado-actualizada', data);\n    });\n\n    // Estado de pedido actualizado\n    this.socket.on('pedido-estado-actualizado', data => {\n      console.log('üìã Pedido actualizado:', data);\n      this.triggerCallback('pedido-estado-actualizado', data);\n    });\n\n    // Mensaje del administrador\n    this.socket.on('admin-mensaje', data => {\n      console.log('üì¢ Mensaje del admin:', data);\n      const toastConfig = {\n        duration: 8000,\n        style: {\n          background: data.tipo === 'error' ? '#ff4757' : data.tipo === 'warning' ? '#ffa502' : '#2ed573',\n          color: 'white'\n        }\n      };\n      toast(`üì¢ ${data.admin}: ${data.mensaje}`, toastConfig);\n    });\n\n    // Pong response\n    this.socket.on('pong', data => {\n      console.log('üèì Pong recibido:', data.timestamp);\n    });\n  }\n\n  // üîä Reproducir sonido de notificaci√≥n\n  playNotificationSound() {\n    try {\n      // Crear audio desde data URL (evita problemas de archivos)\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\n      oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.1);\n      oscillator.frequency.setValueAtTime(800, audioContext.currentTime + 0.2);\n      gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);\n      oscillator.start(audioContext.currentTime);\n      oscillator.stop(audioContext.currentTime + 0.3);\n    } catch (error) {\n      console.log('üîá No se pudo reproducir sonido:', error.message);\n    }\n  }\n\n  // üè† Unirse a sala espec√≠fica\n  joinRole(role) {\n    var _this$socket2;\n    if ((_this$socket2 = this.socket) !== null && _this$socket2 !== void 0 && _this$socket2.connected) {\n      this.socket.emit('join-room', role);\n      console.log(`üè† Unido a sala: ${role}`);\n    }\n  }\n\n  // üì§ Emitir eventos al servidor\n  emit(event, data) {\n    var _this$socket3;\n    if ((_this$socket3 = this.socket) !== null && _this$socket3 !== void 0 && _this$socket3.connected) {\n      this.socket.emit(event, data);\n      console.log(`üì§ Evento emitido: ${event}`, data);\n    } else {\n      console.warn('‚ö†Ô∏è Socket no conectado, evento no enviado:', event);\n    }\n  }\n\n  // üé£ Escuchar eventos personalizados\n  on(event, callback) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(callback);\n  }\n\n  // üîá Dejar de escuchar eventos\n  off(event, callback) {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event);\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  // üéØ Ejecutar callbacks personalizados\n  triggerCallback(event, data) {\n    if (this.eventListeners.has(event)) {\n      this.eventListeners.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`‚ùå Error ejecutando callback para ${event}:`, error);\n        }\n      });\n    }\n  }\n\n  // üèì Ping al servidor\n  ping() {\n    var _this$socket4;\n    if ((_this$socket4 = this.socket) !== null && _this$socket4 !== void 0 && _this$socket4.connected) {\n      this.socket.emit('ping');\n    }\n  }\n\n  // üìä Solicitar estad√≠sticas (solo admin)\n  requestStats() {\n    var _this$user;\n    if (((_this$user = this.user) === null || _this$user === void 0 ? void 0 : _this$user.rol) === 'administrador') {\n      this.emit('solicitar-estadisticas');\n    }\n  }\n\n  // üó£Ô∏è Broadcast mensaje (solo admin)\n  adminBroadcast(mensaje, tipo = 'info') {\n    var _this$user2;\n    if (((_this$user2 = this.user) === null || _this$user2 === void 0 ? void 0 : _this$user2.rol) === 'administrador') {\n      this.emit('admin-broadcast', {\n        mensaje,\n        tipo\n      });\n    }\n  }\n\n  // üçΩÔ∏è M√©todos espec√≠ficos para mozos\n  markOrderDelivered(pedidoId, mesa, total) {\n    var _this$user3;\n    if (((_this$user3 = this.user) === null || _this$user3 === void 0 ? void 0 : _this$user3.rol) === 'mozo') {\n      this.emit('pedido-entregado', {\n        pedidoId,\n        mesa,\n        total\n      });\n    }\n  }\n  requestBill(mesa, pedidos, total) {\n    var _this$user4;\n    if (((_this$user4 = this.user) === null || _this$user4 === void 0 ? void 0 : _this$user4.rol) === 'mozo') {\n      this.emit('solicitar-cuenta', {\n        mesa,\n        pedidos,\n        total\n      });\n    }\n  }\n\n  // üë®‚Äçüç≥ M√©todos espec√≠ficos para cocina\n  takeOrder(pedidoId, mesa) {\n    var _this$user5;\n    if (((_this$user5 = this.user) === null || _this$user5 === void 0 ? void 0 : _this$user5.rol) === 'cocina') {\n      this.emit('tomar-pedido', {\n        pedidoId,\n        mesa\n      });\n    }\n  }\n  markOrderReady(pedidoId, mesa, productos, mozoId) {\n    var _this$user6;\n    if (((_this$user6 = this.user) === null || _this$user6 === void 0 ? void 0 : _this$user6.rol) === 'cocina') {\n      this.emit('pedido-preparado', {\n        pedidoId,\n        mesa,\n        productos,\n        mozoId\n      });\n    }\n  }\n  changeProductAvailability(productoId, productoNombre, disponible) {\n    var _this$user7;\n    if (((_this$user7 = this.user) === null || _this$user7 === void 0 ? void 0 : _this$user7.rol) === 'cocina') {\n      this.emit('cambiar-disponibilidad-producto', {\n        productoId,\n        productoNombre,\n        disponible\n      });\n    }\n  }\n\n  // üí∞ M√©todos espec√≠ficos para cajeros\n  processPayment(mesa, total, metodoPago) {\n    var _this$user8;\n    if (((_this$user8 = this.user) === null || _this$user8 === void 0 ? void 0 : _this$user8.rol) === 'cajero') {\n      this.emit('pago-procesado', {\n        mesa,\n        total,\n        metodoPago\n      });\n    }\n  }\n\n  // üîå Desconectar\n  disconnect() {\n    if (this.socket) {\n      console.log('üîå Desconectando Socket.io...');\n      this.socket.disconnect();\n      this.socket = null;\n      this.connected = false;\n      this.user = null;\n      this.eventListeners.clear();\n    }\n  }\n\n  // üìä Getters de estado\n  isConnected() {\n    var _this$socket5;\n    return this.connected && ((_this$socket5 = this.socket) === null || _this$socket5 === void 0 ? void 0 : _this$socket5.connected);\n  }\n  getUser() {\n    return this.user;\n  }\n  getSocketId() {\n    var _this$socket6;\n    return (_this$socket6 = this.socket) === null || _this$socket6 === void 0 ? void 0 : _this$socket6.id;\n  }\n  getConnectionStats() {\n    var _this$socket7;\n    return {\n      connected: this.connected,\n      socketId: (_this$socket7 = this.socket) === null || _this$socket7 === void 0 ? void 0 : _this$socket7.id,\n      user: this.user,\n      reconnectAttempts: this.reconnectAttempts\n    };\n  }\n}\n\n// Singleton instance\nconst socketService = new SocketService();\nexport default socketService;","map":{"version":3,"names":["io","toast","SocketService","constructor","socket","connected","user","reconnectAttempts","maxReconnectAttempts","eventListeners","Map","serverUrl","process","env","REACT_APP_SOCKET_URL","connect","token","_this$socket","console","log","nombre","rol","auth","transports","timeout","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","setupEventHandlers","on","id","joinRole","NODE_ENV","success","duration","reason","attemptNumber","error","message","disconnect","setupRoleSpecificEvents","setupGeneralEvents","setupMozoEvents","setupCocinaEvents","setupCajeroEvents","setupAdminEvents","data","playNotificationSound","mesa","pedidoId","icon","triggerCallback","mensaje","disponible","productoNombre","sonido","pedido","numero","style","background","color","fontSize","fontWeight","total","toastConfig","tipo","admin","timestamp","audioContext","window","AudioContext","webkitAudioContext","oscillator","createOscillator","gainNode","createGain","destination","frequency","setValueAtTime","currentTime","gain","exponentialRampToValueAtTime","start","stop","role","_this$socket2","emit","event","_this$socket3","warn","callback","has","set","get","push","off","listeners","index","indexOf","splice","forEach","ping","_this$socket4","requestStats","_this$user","adminBroadcast","_this$user2","markOrderDelivered","_this$user3","requestBill","pedidos","_this$user4","takeOrder","_this$user5","markOrderReady","productos","mozoId","_this$user6","changeProductAvailability","productoId","_this$user7","processPayment","metodoPago","_this$user8","clear","isConnected","_this$socket5","getUser","getSocketId","_this$socket6","getConnectionStats","_this$socket7","socketId","socketService"],"sources":["D:/Proyecto-Silva-SIRER/sirer-project/frontend/src/services/socket.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\nimport toast from 'react-hot-toast';\r\n\r\nclass SocketService {\r\n    constructor() {\r\n        this.socket = null;\r\n        this.connected = false;\r\n        this.user = null;\r\n        this.reconnectAttempts = 0;\r\n        this.maxReconnectAttempts = 5;\r\n        this.eventListeners = new Map();\r\n        \r\n        // URLs del servidor\r\n        this.serverUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\r\n    }\r\n\r\n    // üîå Conectar al servidor Socket.io\r\n    connect(token, user) {\r\n        if (this.socket?.connected) {\r\n            console.log('üîå Ya conectado a Socket.io');\r\n            return this.socket;\r\n        }\r\n\r\n        this.user = user;\r\n        \r\n        console.log(`üîÑ Conectando a Socket.io como ${user.nombre} (${user.rol})...`);\r\n\r\n        this.socket = io(this.serverUrl, {\r\n            auth: { token },\r\n            transports: ['websocket', 'polling'],\r\n            timeout: 5000,\r\n            reconnection: true,\r\n            reconnectionAttempts: this.maxReconnectAttempts,\r\n            reconnectionDelay: 1000,\r\n            reconnectionDelayMax: 5000\r\n        });\r\n\r\n        this.setupEventHandlers();\r\n        return this.socket;\r\n    }\r\n\r\n    // üì° Configurar manejadores de eventos del socket\r\n    setupEventHandlers() {\r\n        // Evento de conexi√≥n exitosa\r\n        this.socket.on('connect', () => {\r\n            this.connected = true;\r\n            this.reconnectAttempts = 0;\r\n            console.log(`‚úÖ Conectado a Socket.io - ID: ${this.socket.id}`);\r\n            \r\n            // Unirse a la sala del rol\r\n            this.joinRole(this.user.rol);\r\n            \r\n            // Notificaci√≥n de conexi√≥n (solo en desarrollo)\r\n            if (process.env.NODE_ENV === 'development') {\r\n                toast.success(`üîå Conectado en tiempo real`, { duration: 2000 });\r\n            }\r\n        });\r\n\r\n        // Evento de desconexi√≥n\r\n        this.socket.on('disconnect', (reason) => {\r\n            this.connected = false;\r\n            console.log(`‚ùå Desconectado de Socket.io: ${reason}`);\r\n            \r\n            if (reason === 'io server disconnect') {\r\n                // Desconexi√≥n del servidor, reconectar manualmente\r\n                this.socket.connect();\r\n            }\r\n        });\r\n\r\n        // Eventos de reconexi√≥n\r\n        this.socket.on('reconnect_attempt', (attemptNumber) => {\r\n            this.reconnectAttempts = attemptNumber;\r\n            console.log(`üîÑ Intento de reconexi√≥n ${attemptNumber}/${this.maxReconnectAttempts}`);\r\n        });\r\n\r\n        this.socket.on('reconnect', (attemptNumber) => {\r\n            this.connected = true;\r\n            console.log(`‚úÖ Reconectado despu√©s de ${attemptNumber} intentos`);\r\n            toast.success('üîå Reconectado al sistema', { duration: 3000 });\r\n        });\r\n\r\n        this.socket.on('reconnect_failed', () => {\r\n            console.error('‚ùå Fall√≥ la reconexi√≥n');\r\n            toast.error('‚ùå Error de conexi√≥n. Recarga la p√°gina.', { duration: 10000 });\r\n        });\r\n\r\n        // Eventos de error\r\n        this.socket.on('connect_error', (error) => {\r\n            console.error('‚ùå Error de conexi√≥n Socket.io:', error.message);\r\n            \r\n            if (error.message === 'Autenticaci√≥n fallida') {\r\n                toast.error('‚ùå Error de autenticaci√≥n en tiempo real');\r\n                this.disconnect();\r\n            }\r\n        });\r\n\r\n        // Configurar eventos espec√≠ficos por rol\r\n        this.setupRoleSpecificEvents();\r\n        \r\n        // Configurar eventos generales\r\n        this.setupGeneralEvents();\r\n    }\r\n\r\n    // üé≠ Configurar eventos espec√≠ficos seg√∫n el rol del usuario\r\n    setupRoleSpecificEvents() {\r\n        if (!this.user) return;\r\n\r\n        switch (this.user.rol) {\r\n            case 'mozo':\r\n                this.setupMozoEvents();\r\n                break;\r\n            case 'cocina':\r\n                this.setupCocinaEvents();\r\n                break;\r\n            case 'cajero':\r\n                this.setupCajeroEvents();\r\n                break;\r\n            case 'administrador':\r\n                this.setupAdminEvents();\r\n                break;\r\n            default:\r\n                console.log(`Rol ${this.user.rol} no tiene eventos espec√≠ficos configurados`);\r\n                break;\r\n        }\r\n    }\r\n\r\n    // üçΩÔ∏è Eventos para mozos\r\n    setupMozoEvents() {\r\n        // Pedido listo para entregar\r\n        this.socket.on('pedido-listo', (data) => {\r\n            console.log('üîî Pedido listo para entregar:', data);\r\n            \r\n            // Notificaci√≥n sonora + visual\r\n            this.playNotificationSound();\r\n            toast.success(\r\n                `üçΩÔ∏è Mesa ${data.mesa} - Pedido #${data.pedidoId} listo para entregar`,\r\n                { \r\n                    duration: 8000,\r\n                    icon: 'üîî'\r\n                }\r\n            );\r\n            \r\n            // Callback personalizado si existe\r\n            this.triggerCallback('pedido-listo', data);\r\n        });\r\n\r\n        // Pedido disponible para cualquier mozo\r\n        this.socket.on('pedido-disponible-para-entregar', (data) => {\r\n            console.log('üìã Pedido disponible para entregar:', data);\r\n            \r\n            toast(\r\n                `üìã Mesa ${data.mesa} tiene un pedido listo`,\r\n                { \r\n                    duration: 5000,\r\n                    icon: 'üìã'\r\n                }\r\n            );\r\n        });\r\n\r\n        // Cambio en disponibilidad de productos\r\n        this.socket.on('producto-disponibilidad-actualizada', (data) => {\r\n            console.log('ü•ò Producto actualizado:', data);\r\n            \r\n            const mensaje = data.disponible ? \r\n                `‚úÖ ${data.productoNombre} ya est√° disponible` :\r\n                `‚ùå ${data.productoNombre} se agot√≥`;\r\n                \r\n            toast(mensaje, {\r\n                duration: 4000,\r\n                icon: data.disponible ? '‚úÖ' : '‚ùå'\r\n            });\r\n            \r\n            this.triggerCallback('producto-disponibilidad-actualizada', data);\r\n        });\r\n    }\r\n\r\n    // üë®‚Äçüç≥ Eventos para cocina\r\n    setupCocinaEvents() {\r\n        // Nuevo pedido recibido\r\n        this.socket.on('nuevo-pedido', (data) => {\r\n            console.log('üîî Nuevo pedido recibido:', data);\r\n            \r\n            // Sonido de notificaci√≥n\r\n            if (data.sonido) {\r\n                this.playNotificationSound();\r\n            }\r\n            \r\n            // Notificaci√≥n visual prominente\r\n            toast.success(\r\n                `üî• NUEVO PEDIDO - Mesa ${data.pedido.mesa.numero}`,\r\n                { \r\n                    duration: 10000,\r\n                    icon: 'üîî',\r\n                    style: {\r\n                        background: '#ff6b6b',\r\n                        color: 'white',\r\n                        fontSize: '16px',\r\n                        fontWeight: 'bold'\r\n                    }\r\n                }\r\n            );\r\n            \r\n            // Callback para actualizar UI\r\n            this.triggerCallback('nuevo-pedido', data);\r\n        });\r\n    }\r\n\r\n    // üí∞ Eventos para cajeros\r\n    setupCajeroEvents() {\r\n        // Pedido listo para cobrar\r\n        this.socket.on('pedido-listo-para-cobrar', (data) => {\r\n            console.log('üí≥ Pedido listo para cobrar:', data);\r\n            \r\n            toast.success(\r\n                `üí≥ Mesa ${data.mesa} lista para cobrar - $${data.total}`,\r\n                { \r\n                    duration: 6000,\r\n                    icon: 'üí∞'\r\n                }\r\n            );\r\n            \r\n            this.triggerCallback('pedido-listo-para-cobrar', data);\r\n        });\r\n\r\n        // Cuenta solicitada\r\n        this.socket.on('cuenta-solicitada', (data) => {\r\n            console.log('üßæ Cuenta solicitada:', data);\r\n            \r\n            toast.success(\r\n                `üßæ Mesa ${data.mesa} solicita la cuenta - $${data.total}`,\r\n                { \r\n                    duration: 8000,\r\n                    icon: 'üßæ'\r\n                }\r\n            );\r\n            \r\n            this.triggerCallback('cuenta-solicitada', data);\r\n        });\r\n    }\r\n\r\n    // üëë Eventos para administradores\r\n    setupAdminEvents() {\r\n        // Estad√≠sticas de conexi√≥n\r\n        this.socket.on('connection-stats', (data) => {\r\n            console.log('üìä Stats de conexi√≥n:', data);\r\n            this.triggerCallback('connection-stats', data);\r\n        });\r\n\r\n        // Venta realizada\r\n        this.socket.on('venta-realizada', (data) => {\r\n            console.log('üí∞ Venta realizada:', data);\r\n            this.triggerCallback('venta-realizada', data);\r\n        });\r\n\r\n        // Inventario actualizado\r\n        this.socket.on('inventario-actualizado', (data) => {\r\n            console.log('üì¶ Inventario actualizado:', data);\r\n            this.triggerCallback('inventario-actualizado', data);\r\n        });\r\n    }\r\n\r\n    // üåê Eventos generales para todos los roles\r\n    setupGeneralEvents() {\r\n        // Mesa liberada\r\n        this.socket.on('mesa-liberada', (data) => {\r\n            console.log('üè† Mesa liberada:', data);\r\n            this.triggerCallback('mesa-liberada', data);\r\n        });\r\n\r\n        // Estado de mesa actualizado\r\n        this.socket.on('mesa-estado-actualizada', (data) => {\r\n            console.log('üè† Mesa actualizada:', data);\r\n            this.triggerCallback('mesa-estado-actualizada', data);\r\n        });\r\n\r\n        // Estado de pedido actualizado\r\n        this.socket.on('pedido-estado-actualizado', (data) => {\r\n            console.log('üìã Pedido actualizado:', data);\r\n            this.triggerCallback('pedido-estado-actualizado', data);\r\n        });\r\n\r\n        // Mensaje del administrador\r\n        this.socket.on('admin-mensaje', (data) => {\r\n            console.log('üì¢ Mensaje del admin:', data);\r\n            \r\n            const toastConfig = {\r\n                duration: 8000,\r\n                style: {\r\n                    background: data.tipo === 'error' ? '#ff4757' : \r\n                               data.tipo === 'warning' ? '#ffa502' : '#2ed573',\r\n                    color: 'white'\r\n                }\r\n            };\r\n            \r\n            toast(\r\n                `üì¢ ${data.admin}: ${data.mensaje}`,\r\n                toastConfig\r\n            );\r\n        });\r\n\r\n        // Pong response\r\n        this.socket.on('pong', (data) => {\r\n            console.log('üèì Pong recibido:', data.timestamp);\r\n        });\r\n    }\r\n\r\n    // üîä Reproducir sonido de notificaci√≥n\r\n    playNotificationSound() {\r\n        try {\r\n            // Crear audio desde data URL (evita problemas de archivos)\r\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n            const oscillator = audioContext.createOscillator();\r\n            const gainNode = audioContext.createGain();\r\n            \r\n            oscillator.connect(gainNode);\r\n            gainNode.connect(audioContext.destination);\r\n            \r\n            oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\r\n            oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.1);\r\n            oscillator.frequency.setValueAtTime(800, audioContext.currentTime + 0.2);\r\n            \r\n            gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);\r\n            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);\r\n            \r\n            oscillator.start(audioContext.currentTime);\r\n            oscillator.stop(audioContext.currentTime + 0.3);\r\n        } catch (error) {\r\n            console.log('üîá No se pudo reproducir sonido:', error.message);\r\n        }\r\n    }\r\n\r\n    // üè† Unirse a sala espec√≠fica\r\n    joinRole(role) {\r\n        if (this.socket?.connected) {\r\n            this.socket.emit('join-room', role);\r\n            console.log(`üè† Unido a sala: ${role}`);\r\n        }\r\n    }\r\n\r\n    // üì§ Emitir eventos al servidor\r\n    emit(event, data) {\r\n        if (this.socket?.connected) {\r\n            this.socket.emit(event, data);\r\n            console.log(`üì§ Evento emitido: ${event}`, data);\r\n        } else {\r\n            console.warn('‚ö†Ô∏è Socket no conectado, evento no enviado:', event);\r\n        }\r\n    }\r\n\r\n    // üé£ Escuchar eventos personalizados\r\n    on(event, callback) {\r\n        if (!this.eventListeners.has(event)) {\r\n            this.eventListeners.set(event, []);\r\n        }\r\n        this.eventListeners.get(event).push(callback);\r\n    }\r\n\r\n    // üîá Dejar de escuchar eventos\r\n    off(event, callback) {\r\n        if (this.eventListeners.has(event)) {\r\n            const listeners = this.eventListeners.get(event);\r\n            const index = listeners.indexOf(callback);\r\n            if (index > -1) {\r\n                listeners.splice(index, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // üéØ Ejecutar callbacks personalizados\r\n    triggerCallback(event, data) {\r\n        if (this.eventListeners.has(event)) {\r\n            this.eventListeners.get(event).forEach(callback => {\r\n                try {\r\n                    callback(data);\r\n                } catch (error) {\r\n                    console.error(`‚ùå Error ejecutando callback para ${event}:`, error);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // üèì Ping al servidor\r\n    ping() {\r\n        if (this.socket?.connected) {\r\n            this.socket.emit('ping');\r\n        }\r\n    }\r\n\r\n    // üìä Solicitar estad√≠sticas (solo admin)\r\n    requestStats() {\r\n        if (this.user?.rol === 'administrador') {\r\n            this.emit('solicitar-estadisticas');\r\n        }\r\n    }\r\n\r\n    // üó£Ô∏è Broadcast mensaje (solo admin)\r\n    adminBroadcast(mensaje, tipo = 'info') {\r\n        if (this.user?.rol === 'administrador') {\r\n            this.emit('admin-broadcast', { mensaje, tipo });\r\n        }\r\n    }\r\n\r\n    // üçΩÔ∏è M√©todos espec√≠ficos para mozos\r\n    markOrderDelivered(pedidoId, mesa, total) {\r\n        if (this.user?.rol === 'mozo') {\r\n            this.emit('pedido-entregado', { pedidoId, mesa, total });\r\n        }\r\n    }\r\n\r\n    requestBill(mesa, pedidos, total) {\r\n        if (this.user?.rol === 'mozo') {\r\n            this.emit('solicitar-cuenta', { mesa, pedidos, total });\r\n        }\r\n    }\r\n\r\n    // üë®‚Äçüç≥ M√©todos espec√≠ficos para cocina\r\n    takeOrder(pedidoId, mesa) {\r\n        if (this.user?.rol === 'cocina') {\r\n            this.emit('tomar-pedido', { pedidoId, mesa });\r\n        }\r\n    }\r\n\r\n    markOrderReady(pedidoId, mesa, productos, mozoId) {\r\n        if (this.user?.rol === 'cocina') {\r\n            this.emit('pedido-preparado', { pedidoId, mesa, productos, mozoId });\r\n        }\r\n    }\r\n\r\n    changeProductAvailability(productoId, productoNombre, disponible) {\r\n        if (this.user?.rol === 'cocina') {\r\n            this.emit('cambiar-disponibilidad-producto', { \r\n                productoId, \r\n                productoNombre, \r\n                disponible \r\n            });\r\n        }\r\n    }\r\n\r\n    // üí∞ M√©todos espec√≠ficos para cajeros\r\n    processPayment(mesa, total, metodoPago) {\r\n        if (this.user?.rol === 'cajero') {\r\n            this.emit('pago-procesado', { mesa, total, metodoPago });\r\n        }\r\n    }\r\n\r\n    // üîå Desconectar\r\n    disconnect() {\r\n        if (this.socket) {\r\n            console.log('üîå Desconectando Socket.io...');\r\n            this.socket.disconnect();\r\n            this.socket = null;\r\n            this.connected = false;\r\n            this.user = null;\r\n            this.eventListeners.clear();\r\n        }\r\n    }\r\n\r\n    // üìä Getters de estado\r\n    isConnected() {\r\n        return this.connected && this.socket?.connected;\r\n    }\r\n\r\n    getUser() {\r\n        return this.user;\r\n    }\r\n\r\n    getSocketId() {\r\n        return this.socket?.id;\r\n    }\r\n\r\n    getConnectionStats() {\r\n        return {\r\n            connected: this.connected,\r\n            socketId: this.socket?.id,\r\n            user: this.user,\r\n            reconnectAttempts: this.reconnectAttempts\r\n        };\r\n    }\r\n}\r\n\r\n// Singleton instance\r\nconst socketService = new SocketService();\r\n\r\nexport default socketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}