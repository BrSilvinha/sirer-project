{"ast":null,"code":"var _jsxFileName = \"D:\\\\Proyecto-Silva-SIRER\\\\sirer-project\\\\frontend\\\\src\\\\context\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport socketService from '../services/socket';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionStats, setConnectionStats] = useState(null);\n  const [lastActivity, setLastActivity] = useState(null);\n\n  // ðŸ”Œ Conectar cuando el usuario se autentica\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      const token = localStorage.getItem('accessToken');\n      if (token) {\n        console.log('ðŸš€ Iniciando conexiÃ³n Socket.io...');\n        socketService.connect(token, user);\n\n        // Configurar listeners para el estado de conexiÃ³n\n        const interval = setInterval(() => {\n          setIsConnected(socketService.isConnected());\n          setConnectionStats(socketService.getConnectionStats());\n        }, 2000);\n        return () => clearInterval(interval);\n      }\n    } else {\n      // Desconectar si no hay usuario autenticado\n      if (socketService.isConnected()) {\n        console.log('ðŸ”Œ Desconectando Socket.io - usuario no autenticado');\n        socketService.disconnect();\n        setIsConnected(false);\n        setConnectionStats(null);\n      }\n    }\n  }, [isAuthenticated, user]);\n\n  // ðŸ§¹ Limpiar al desmontar\n  useEffect(() => {\n    return () => {\n      if (socketService.isConnected()) {\n        socketService.disconnect();\n      }\n    };\n  }, []);\n\n  // ðŸ“¡ MÃ©todos para los componentes\n  const emit = useCallback((event, data) => {\n    socketService.emit(event, data);\n    setLastActivity(new Date().toISOString());\n  }, []);\n  const on = useCallback((event, callback) => {\n    socketService.on(event, callback);\n  }, []);\n  const off = useCallback((event, callback) => {\n    socketService.off(event, callback);\n  }, []);\n\n  // ðŸŽ¯ MÃ©todos especÃ­ficos por rol\n  const mozoActions = {\n    markOrderDelivered: (pedidoId, mesa, total) => {\n      socketService.markOrderDelivered(pedidoId, mesa, total);\n      setLastActivity(new Date().toISOString());\n    },\n    requestBill: (mesa, pedidos, total) => {\n      socketService.requestBill(mesa, pedidos, total);\n      setLastActivity(new Date().toISOString());\n    }\n  };\n  const cocinaActions = {\n    takeOrder: (pedidoId, mesa) => {\n      socketService.takeOrder(pedidoId, mesa);\n      setLastActivity(new Date().toISOString());\n    },\n    markOrderReady: (pedidoId, mesa, productos, mozoId) => {\n      socketService.markOrderReady(pedidoId, mesa, productos, mozoId);\n      setLastActivity(new Date().toISOString());\n    },\n    changeProductAvailability: (productoId, productoNombre, disponible) => {\n      socketService.changeProductAvailability(productoId, productoNombre, disponible);\n      setLastActivity(new Date().toISOString());\n    }\n  };\n  const cajeroActions = {\n    processPayment: (mesa, total, metodoPago) => {\n      socketService.processPayment(mesa, total, metodoPago);\n      setLastActivity(new Date().toISOString());\n    }\n  };\n  const adminActions = {\n    requestStats: () => {\n      socketService.requestStats();\n      setLastActivity(new Date().toISOString());\n    },\n    broadcast: (mensaje, tipo) => {\n      socketService.adminBroadcast(mensaje, tipo);\n      setLastActivity(new Date().toISOString());\n    }\n  };\n\n  // ðŸ”§ Utilidades\n  const ping = useCallback(() => {\n    socketService.ping();\n  }, []);\n  const getSocketInfo = useCallback(() => ({\n    isConnected,\n    user: user,\n    socketId: socketService.getSocketId(),\n    lastActivity,\n    stats: connectionStats\n  }), [isConnected, user, lastActivity, connectionStats]);\n  const value = {\n    // Estado\n    isConnected,\n    connectionStats,\n    lastActivity,\n    // MÃ©todos generales\n    emit,\n    on,\n    off,\n    ping,\n    getSocketInfo,\n    // Acciones por rol\n    mozo: mozoActions,\n    cocina: cocinaActions,\n    cajero: cajeroActions,\n    admin: adminActions,\n    // Instancia del servicio (para casos avanzados)\n    socketService\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n};\n_s(SocketProvider, \"h+RC0bLmsNUuCvKHL0Nx0dtECPU=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket debe ser usado dentro de un SocketProvider');\n  }\n  return context;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default SocketContext;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useCallback","socketService","useAuth","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","user","isAuthenticated","isConnected","setIsConnected","connectionStats","setConnectionStats","lastActivity","setLastActivity","token","localStorage","getItem","console","log","connect","interval","setInterval","getConnectionStats","clearInterval","disconnect","emit","event","data","Date","toISOString","on","callback","off","mozoActions","markOrderDelivered","pedidoId","mesa","total","requestBill","pedidos","cocinaActions","takeOrder","markOrderReady","productos","mozoId","changeProductAvailability","productoId","productoNombre","disponible","cajeroActions","processPayment","metodoPago","adminActions","requestStats","broadcast","mensaje","tipo","adminBroadcast","ping","getSocketInfo","socketId","getSocketId","stats","value","mozo","cocina","cajero","admin","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","$RefreshReg$"],"sources":["D:/Proyecto-Silva-SIRER/sirer-project/frontend/src/context/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\r\nimport socketService from '../services/socket';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n    const { user, isAuthenticated } = useAuth();\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [connectionStats, setConnectionStats] = useState(null);\r\n    const [lastActivity, setLastActivity] = useState(null);\r\n\r\n    // ðŸ”Œ Conectar cuando el usuario se autentica\r\n    useEffect(() => {\r\n        if (isAuthenticated && user) {\r\n            const token = localStorage.getItem('accessToken');\r\n            if (token) {\r\n                console.log('ðŸš€ Iniciando conexiÃ³n Socket.io...');\r\n                socketService.connect(token, user);\r\n                \r\n                // Configurar listeners para el estado de conexiÃ³n\r\n                const interval = setInterval(() => {\r\n                    setIsConnected(socketService.isConnected());\r\n                    setConnectionStats(socketService.getConnectionStats());\r\n                }, 2000);\r\n\r\n                return () => clearInterval(interval);\r\n            }\r\n        } else {\r\n            // Desconectar si no hay usuario autenticado\r\n            if (socketService.isConnected()) {\r\n                console.log('ðŸ”Œ Desconectando Socket.io - usuario no autenticado');\r\n                socketService.disconnect();\r\n                setIsConnected(false);\r\n                setConnectionStats(null);\r\n            }\r\n        }\r\n    }, [isAuthenticated, user]);\r\n\r\n    // ðŸ§¹ Limpiar al desmontar\r\n    useEffect(() => {\r\n        return () => {\r\n            if (socketService.isConnected()) {\r\n                socketService.disconnect();\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    // ðŸ“¡ MÃ©todos para los componentes\r\n    const emit = useCallback((event, data) => {\r\n        socketService.emit(event, data);\r\n        setLastActivity(new Date().toISOString());\r\n    }, []);\r\n\r\n    const on = useCallback((event, callback) => {\r\n        socketService.on(event, callback);\r\n    }, []);\r\n\r\n    const off = useCallback((event, callback) => {\r\n        socketService.off(event, callback);\r\n    }, []);\r\n\r\n    // ðŸŽ¯ MÃ©todos especÃ­ficos por rol\r\n    const mozoActions = {\r\n        markOrderDelivered: (pedidoId, mesa, total) => {\r\n            socketService.markOrderDelivered(pedidoId, mesa, total);\r\n            setLastActivity(new Date().toISOString());\r\n        },\r\n        requestBill: (mesa, pedidos, total) => {\r\n            socketService.requestBill(mesa, pedidos, total);\r\n            setLastActivity(new Date().toISOString());\r\n        }\r\n    };\r\n\r\n    const cocinaActions = {\r\n        takeOrder: (pedidoId, mesa) => {\r\n            socketService.takeOrder(pedidoId, mesa);\r\n            setLastActivity(new Date().toISOString());\r\n        },\r\n        markOrderReady: (pedidoId, mesa, productos, mozoId) => {\r\n            socketService.markOrderReady(pedidoId, mesa, productos, mozoId);\r\n            setLastActivity(new Date().toISOString());\r\n        },\r\n        changeProductAvailability: (productoId, productoNombre, disponible) => {\r\n            socketService.changeProductAvailability(productoId, productoNombre, disponible);\r\n            setLastActivity(new Date().toISOString());\r\n        }\r\n    };\r\n\r\n    const cajeroActions = {\r\n        processPayment: (mesa, total, metodoPago) => {\r\n            socketService.processPayment(mesa, total, metodoPago);\r\n            setLastActivity(new Date().toISOString());\r\n        }\r\n    };\r\n\r\n    const adminActions = {\r\n        requestStats: () => {\r\n            socketService.requestStats();\r\n            setLastActivity(new Date().toISOString());\r\n        },\r\n        broadcast: (mensaje, tipo) => {\r\n            socketService.adminBroadcast(mensaje, tipo);\r\n            setLastActivity(new Date().toISOString());\r\n        }\r\n    };\r\n\r\n    // ðŸ”§ Utilidades\r\n    const ping = useCallback(() => {\r\n        socketService.ping();\r\n    }, []);\r\n\r\n    const getSocketInfo = useCallback(() => ({\r\n        isConnected,\r\n        user: user,\r\n        socketId: socketService.getSocketId(),\r\n        lastActivity,\r\n        stats: connectionStats\r\n    }), [isConnected, user, lastActivity, connectionStats]);\r\n\r\n    const value = {\r\n        // Estado\r\n        isConnected,\r\n        connectionStats,\r\n        lastActivity,\r\n        \r\n        // MÃ©todos generales\r\n        emit,\r\n        on,\r\n        off,\r\n        ping,\r\n        getSocketInfo,\r\n        \r\n        // Acciones por rol\r\n        mozo: mozoActions,\r\n        cocina: cocinaActions,\r\n        cajero: cajeroActions,\r\n        admin: adminActions,\r\n        \r\n        // Instancia del servicio (para casos avanzados)\r\n        socketService\r\n    };\r\n\r\n    return (\r\n        <SocketContext.Provider value={value}>\r\n            {children}\r\n        </SocketContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useSocket = () => {\r\n    const context = useContext(SocketContext);\r\n    if (!context) {\r\n        throw new Error('useSocket debe ser usado dentro de un SocketProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport default SocketContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}